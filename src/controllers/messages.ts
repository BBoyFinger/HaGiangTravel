import { Request, Response } from 'express';
import Message from '../models/Message';
import User from '../models/User';
import transporter from '../config/nodemailer';

// L·∫•y l·ªãch s·ª≠ chat gi·ªØa user v√† admin
export async function getChatHistory(req: Request, res: Response) {
    try {
        const userId = req.params.userId;
        const admin = await User.findOne({ role: 'admin' });
        if (!admin) {
            res.status(404).json({ message: 'No admin found' });
            return;
        }
        
        const messages = await Message.find({
            $or: [
                { from: userId, to: admin._id },
                { from: admin._id, to: userId }
            ]
        })
        .populate('from', 'name email avatarUrl')
        .populate('to', 'name email avatarUrl')
        .sort({ createdAt: 1 });
        
        res.json(messages);
    } catch (err) {
        res.status(500).json({ message: 'L·ªói l·∫•y l·ªãch s·ª≠ chat', error: err });
    }
}

// G·ª≠i tin nh·∫Øn (REST, d√πng cho fallback ho·∫∑c test)
export async function sendMessage(req: Request, res: Response) {
    try {
        const { from, to, content } = req.body;
        
        // Validate input
        if (!from || !to || !content) {
            res.status(400).json({ message: 'Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc' });
            return;
        }
        
        const message = await Message.create({ from, to, content });
        
        // Populate user info
        const populatedMessage = await Message.findById(message._id)
            .populate('from', 'name email avatarUrl')
            .populate('to', 'name email avatarUrl');
        
        // G·ª≠i email th√¥ng b√°o n·∫øu c·∫ßn
        const recipient = await User.findById(to);
        if (recipient && recipient.email) {
            try {
                await transporter.sendMail({
                    from: process.env.EMAIL_USER,
                    to: recipient.email,
                    subject: 'B·∫°n c√≥ tin nh·∫Øn m·ªõi t·ª´ HaGiang Travel',
                    html: `
                        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
                            <h2 style="color: #059669;">üí¨ Tin nh·∫Øn m·ªõi t·ª´ HaGiang Travel</h2>
                            <p>B·∫°n v·ª´a nh·∫≠n ƒë∆∞·ª£c tin nh·∫Øn m·ªõi:</p>
                            <div style="background: #f3f4f6; padding: 15px; border-radius: 8px; margin: 15px 0;">
                                <p style="margin: 0; color: #374151;">${content}</p>
                            </div>
                            <p style="color: #6b7280; font-size: 14px;">
                                ƒêƒÉng nh·∫≠p v√†o website ƒë·ªÉ tr·∫£ l·ªùi tin nh·∫Øn n√†y.
                            </p>
                        </div>
                    `
                });
            } catch (emailErr) {
                console.log('Email notification failed:', emailErr);
            }
        }
        
        res.status(201).json(populatedMessage);
    } catch (err) {
        res.status(500).json({ message: 'L·ªói g·ª≠i tin nh·∫Øn', error: err });
    }
}

// L·∫•y danh s√°ch user ƒë√£ chat v·ªõi admin
export async function getChatUsers(req: Request, res: Response) {
    try {
        // L·∫•y admin
        const admin = await User.findOne({ role: 'admin' });
        if (!admin) {
            res.status(404).json({ message: 'No admin found' });
            return
        }
        // L·∫•y t·∫•t c·∫£ message li√™n quan admin
        const messages = await Message.find({ $or: [{ from: admin._id }, { to: admin._id }] });
        // L·∫•y userId unique
        const userIds = Array.from(new Set(messages.map(m => m.from.toString() === admin._id.toString() ? m.to.toString() : m.from.toString())));
        // L·∫•y th√¥ng tin user
        const users = await User.find({ _id: { $in: userIds } }).select('-passwordHash');
        res.json({ users });
    } catch (err) {
        res.status(500).json({ message: 'L·ªói server khi l·∫•y danh s√°ch user chat.', error: err });
    }
}

export default {
    getChatHistory,
    sendMessage,
    getChatUsers
}; 